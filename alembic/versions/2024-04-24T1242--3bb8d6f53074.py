"""Add triggers and functions.

Revision ID: 3bb8d6f53074
Revises: f68f9d3f8e53
Create Date: 2024-04-24 12:42:34.213213+00:00

"""

from typing import Sequence, Union

from alembic import op
from alembic_utils.pg_function import PGFunction
from alembic_utils.pg_trigger import PGTrigger

# revision identifiers, used by Alembic.
revision: str = "3bb8d6f53074"
down_revision: Union[str, None] = "f68f9d3f8e53"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_update_updated_at_column = PGFunction(
        schema="public",
        signature="update_updated_at_column()",
        definition="RETURNS TRIGGER AS $$ BEGIN     NEW.updated_at = now();     RETURN NEW; END; $$ language 'plpgsql'",
    )
    op.create_entity(public_update_updated_at_column)

    public_auto_event_code_increment_function = PGFunction(
        schema="public",
        signature="auto_event_code_increment_function()",
        definition="RETURNS TRIGGER AS $$ BEGIN     SELECT COALESCE(MAX(increment), 0) + 1 INTO NEW.increment     FROM event_codes     WHERE prefix_id = NEW.prefix_id;    RETURN NEW;END; $$ language 'plpgsql'",
    )
    op.create_entity(public_auto_event_code_increment_function)

    public_prefixes_trg_prefixes__updated_at_auto = PGTrigger(
        schema="public",
        signature="trg_prefixes__updated_at_auto",
        on_entity="public.prefixes",
        is_constraint=False,
        definition="BEFORE UPDATE     ON prefixes     FOR EACH ROW EXECUTE FUNCTION     update_updated_at_column()",
    )
    op.create_entity(public_prefixes_trg_prefixes__updated_at_auto)

    public_event_codes_trg_event_codes__updated_at_auto = PGTrigger(
        schema="public",
        signature="trg_event_codes__updated_at_auto",
        on_entity="public.event_codes",
        is_constraint=False,
        definition="BEFORE UPDATE     ON event_codes     FOR EACH ROW EXECUTE FUNCTION     update_updated_at_column()",
    )
    op.create_entity(public_event_codes_trg_event_codes__updated_at_auto)

    public_event_codes_trg_auto_increment = PGTrigger(
        schema="public",
        signature="trg_auto_increment",
        on_entity="public.event_codes",
        is_constraint=False,
        definition="BEFORE INSERT     ON event_codes     FOR EACH ROW  EXECUTE FUNCTION     auto_event_code_increment_function()",
    )
    op.create_entity(public_event_codes_trg_auto_increment)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_event_codes_trg_auto_increment = PGTrigger(
        schema="public",
        signature="trg_auto_increment",
        on_entity="public.event_codes",
        is_constraint=False,
        definition="BEFORE INSERT     ON event_codes     FOR EACH ROW  EXECUTE FUNCTION     auto_event_code_increment_function()",
    )
    op.drop_entity(public_event_codes_trg_auto_increment)

    public_event_codes_trg_event_codes__updated_at_auto = PGTrigger(
        schema="public",
        signature="trg_event_codes__updated_at_auto",
        on_entity="public.event_codes",
        is_constraint=False,
        definition="BEFORE UPDATE     ON event_codes     FOR EACH ROW EXECUTE FUNCTION     update_updated_at_column()",
    )
    op.drop_entity(public_event_codes_trg_event_codes__updated_at_auto)

    public_prefixes_trg_prefixes__updated_at_auto = PGTrigger(
        schema="public",
        signature="trg_prefixes__updated_at_auto",
        on_entity="public.prefixes",
        is_constraint=False,
        definition="BEFORE UPDATE     ON prefixes     FOR EACH ROW EXECUTE FUNCTION     update_updated_at_column()",
    )
    op.drop_entity(public_prefixes_trg_prefixes__updated_at_auto)

    public_auto_event_code_increment_function = PGFunction(
        schema="public",
        signature="auto_event_code_increment_function()",
        definition="RETURNS TRIGGER AS $$ BEGIN     SELECT COALESCE(MAX(increment), 0) + 1 INTO NEW.increment     FROM event_codes     WHERE prefix_id = NEW.prefix_id;    RETURN NEW;END; $$ language 'plpgsql'",
    )
    op.drop_entity(public_auto_event_code_increment_function)

    public_update_updated_at_column = PGFunction(
        schema="public",
        signature="update_updated_at_column()",
        definition="RETURNS TRIGGER AS $$ BEGIN     NEW.updated_at = now();     RETURN NEW; END; $$ language 'plpgsql'",
    )
    op.drop_entity(public_update_updated_at_column)

    # ### end Alembic commands ###
